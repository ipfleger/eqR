% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CubicSpline.R
\name{linear_poly}
\alias{linear_poly}
\title{Evaluate a Linear Polynomial (Linear Interpolation)}
\usage{
linear_poly(x0, y0, x1, y1, xvalue)
}
\arguments{
\item{x0}{A numeric value for the x-coordinate of the first point.}

\item{y0}{A numeric value for the y-coordinate of the first point.}

\item{x1}{A numeric value for the x-coordinate of the second point.}

\item{y1}{A numeric value for the y-coordinate of the second point.}

\item{xvalue}{A numeric vector of x-values at which to evaluate the function.}
}
\value{
A numeric vector of the interpolated y-values.
}
\description{
Evaluates a linear function passing through two points `(x0, y0)` and
`(x1, y1)` at a new point `xvalue`. This is effectively linear interpolation.
This function is an R equivalent of `linearPoly` from the C library.
}
\details{
This function uses R's built-in `stats::approxfun` to create an
interpolation function and then applies it to the `xvalue`. This is more
robust and idiomatic than a direct translation of the C code's slope-intercept
calculation. The function can handle a vector of `xvalue`s.
}
\examples{
# Find the y-value at x=5 for a line passing through (0,0) and (10,20)
linear_poly(x0 = 0, y0 = 0, x1 = 10, y1 = 20, xvalue = 5)
#> [1] 10

# Can also handle vectors
linear_poly(x0 = 0, y0 = 0, x1 = 10, y1 = 20, xvalue = c(2.5, 5, 7.5))
#> [1]  5 10 15
}
\author{
Jaehoon Seol (Original C code), Google's Gemini (R translation)
}
